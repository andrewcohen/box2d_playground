// Generated by CoffeeScript 1.4.0
(function() {
  
// shim layer with setTimeout fallback
window.requestAnimFrame = (function(){
 return  window.requestAnimationFrame       ||
 window.webkitRequestAnimationFrame ||
 window.mozRequestAnimationFrame    ||
 window.oRequestAnimationFrame      ||
 window.msRequestAnimationFrame     ||
 function( callback ){
   window.setTimeout(callback, 1000 / 60);
 }
})();
;

  var Circle, Entity, InputHandler, Playground, Rect, Utilities, World,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Entity = (function() {
    var b2AABB, b2Body, b2BodyDef, b2CircleShape, b2Fixture, b2FixtureDef, b2MassData, b2PolygonShape, b2PulleyJointDef, b2Vec2, b2WeldJointDef, _ref, _ref1, _ref2;

    b2AABB = Box2D.Collision.b2AABB;

    b2Vec2 = Box2D.Common.Math.b2Vec2;

    _ref = Box2D.Dynamics, b2BodyDef = _ref.b2BodyDef, b2Body = _ref.b2Body, b2FixtureDef = _ref.b2FixtureDef, b2Fixture = _ref.b2Fixture;

    _ref1 = Box2D.Collision.Shapes, b2MassData = _ref1.b2MassData, b2PolygonShape = _ref1.b2PolygonShape, b2CircleShape = _ref1.b2CircleShape;

    _ref2 = Box2D.Dynamics.Joints, b2WeldJointDef = _ref2.b2WeldJointDef, b2PulleyJointDef = _ref2.b2PulleyJointDef;

    Entity.prototype.scale = 20;

    function Entity(world, width, height, pX, pY, type) {
      var bodyDef, fixtureDef, shape;
      this.world = world;
      this.width = width;
      this.height = height;
      this.pX = pX;
      this.pY = pY;
      this.type = type;
      bodyDef = new b2BodyDef;
      bodyDef.type = this.type;
      bodyDef.position.Set(this.pX / this.scale, this.pY / this.scale);
      shape = new b2PolygonShape;
      shape.SetAsBox(this.width / this.scale, this.height / this.scale);
      fixtureDef = new b2FixtureDef;
      fixtureDef.density = 1.0;
      fixtureDef.friction = 0.2;
      fixtureDef.shape = shape;
      this.body = this.world.CreateBody(bodyDef);
      this.body.CreateFixture(fixtureDef);
    }

    Entity.prototype.getBody = function() {
      return this.body;
    };

    return Entity;

  })();

  Rect = (function(_super) {
    var b2Vec2;

    __extends(Rect, _super);

    function Rect() {
      return Rect.__super__.constructor.apply(this, arguments);
    }

    b2Vec2 = Box2D.Common.Math.b2Vec2;

    Rect.prototype.push = function() {
      return this.body.ApplyForce(new b2Vec2(8, 0), this.body.GetWorldPoint(new b2Vec2(1, -1)));
    };

    return Rect;

  })(Entity);

  Circle = (function(_super) {
    var b2Body, b2BodyDef, b2CircleShape, b2Fixture, b2FixtureDef, b2MassData, b2Vec2, _ref, _ref1;

    __extends(Circle, _super);

    _ref = Box2D.Dynamics, b2BodyDef = _ref.b2BodyDef, b2Body = _ref.b2Body, b2FixtureDef = _ref.b2FixtureDef, b2Fixture = _ref.b2Fixture;

    _ref1 = Box2D.Collision.Shapes, b2MassData = _ref1.b2MassData, b2CircleShape = _ref1.b2CircleShape;

    b2Vec2 = Box2D.Common.Math.b2Vec2;

    function Circle(world, width, height, pX, pY, type) {
      var bodyDef, fixtureDef, shape;
      this.world = world;
      this.width = width;
      this.height = height;
      this.pX = pX;
      this.pY = pY;
      this.type = type;
      bodyDef = new b2BodyDef;
      bodyDef.type = this.type;
      bodyDef.position.Set(this.pX / this.scale, this.pY / this.scale);
      shape = new b2CircleShape(this.width / this.scale);
      fixtureDef = new b2FixtureDef;
      fixtureDef.density = 1.0;
      fixtureDef.friction = 0.1;
      fixtureDef.restitution = 0.2;
      fixtureDef.shape = shape;
      this.body = this.world.CreateBody(bodyDef);
      this.body.CreateFixture(fixtureDef);
    }

    Circle.prototype.push = function() {
      return this.body.ApplyImpulse(new b2Vec2(100, 140), this.body.GetWorldCenter());
    };

    return Circle;

  })(Entity);

  Utilities = (function() {

    function Utilities() {}

    Utilities.prototype.toRadians = function(degrees) {
      return degrees * (Math.PI / 180);
    };

    return Utilities;

  })();

  World = (function() {
    var b2Body, b2DebugDraw, b2Vec2, b2World, _ref;

    b2Vec2 = Box2D.Common.Math.b2Vec2;

    _ref = Box2D.Dynamics, b2World = _ref.b2World, b2DebugDraw = _ref.b2DebugDraw, b2Body = _ref.b2Body;

    function World(ctx, maxWidth, maxHeight) {
      this.ctx = ctx;
      this.maxWidth = maxWidth;
      this.maxHeight = maxHeight;
      this.mainLoop = __bind(this.mainLoop, this);

      this.inputHandler = new InputHandler(this.world);
      this.createWorld();
      this.enableDebugDraw();
      this.mainLoop();
    }

    World.prototype.createWorld = function() {
      var bSpacing, bX, bottomWall, h, i, leftWall, platform, rightWall, topWall, w, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t,
        _this = this;
      this.world = new b2World(new b2Vec2(0, 10), true);
      w = 480;
      h = 320;
      leftWall = new Entity(this.world, 2, h, 2, h, b2Body.b2_staticBody);
      rightWall = new Entity(this.world, 2, h, w * 2 - 2, h, b2Body.b2_staticBody);
      topWall = new Entity(this.world, w - 4, 2, w, 2, b2Body.b2_staticBody);
      bottomWall = new Entity(this.world, w - 4, 2, w, h * 2 - 2, b2Body.b2_staticBody);
      platform = new Rect(this.world, w, 2, w - 58, h / 2, b2Body.b2_staticBody);
      bX = 50;
      bSpacing = 20;
      this.firstBrick = new Rect(this.world, 4, 12, bX - bSpacing, h / 2, b2Body.b2_dynamicBody);
      for (i = _i = 1; _i <= 41; i = ++_i) {
        new Rect(this.world, 4, 12, bX, h / 2 - 1, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      new Circle(this.world, 12, 12, bX, h / 2, b2Body.b2_dynamicBody);
      platform = new Rect(this.world, w, 2, w + 80, h / 2 + 100, b2Body.b2_staticBody);
      bX = 100;
      for (i = _j = 1; _j <= 44; i = ++_j) {
        new Rect(this.world, 4, 12, bX, h / 2 + 99, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 50;
      platform = new Rect(this.world, w, 2, w - 60, h / 2 + 200, b2Body.b2_staticBody);
      for (i = _k = 1; _k <= 41; i = ++_k) {
        new Rect(this.world, 4, 12, bX, h / 2 + 198, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      new Circle(this.world, 18, 12, bX + 8, h / 2 + 198, b2Body.b2_dynamicBody);
      platform = new Rect(this.world, w, 2, w + 80, h / 2 + 300, b2Body.b2_staticBody);
      bX = 102;
      for (i = _l = 1; _l <= 44; i = ++_l) {
        new Rect(this.world, 4, 12, bX, h / 2 + 297, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 694;
      bSpacing = 40;
      for (i = _m = 1; _m <= 6; i = ++_m) {
        new Rect(this.world, 4, 22, bX, h / 2 + 460, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 794;
      new Rect(this.world, 120, 4, bX, h / 2 + 420, b2Body.b2_dynamicBody);
      bX = 702;
      bSpacing = 8;
      for (i = _n = 1; _n <= 24; i = ++_n) {
        new Rect(this.world, 4, 4, bX, h / 2 + 410, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 718;
      for (i = _o = 1; _o <= 20; i = ++_o) {
        new Rect(this.world, 4, 4, bX, h / 2 + 400, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 734;
      for (i = _p = 1; _p <= 16; i = ++_p) {
        new Rect(this.world, 4, 4, bX, h / 2 + 390, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 750;
      for (i = _q = 1; _q <= 12; i = ++_q) {
        new Rect(this.world, 4, 4, bX, h / 2 + 380, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 766;
      for (i = _r = 1; _r <= 8; i = ++_r) {
        new Rect(this.world, 4, 4, bX, h / 2 + 370, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 782;
      for (i = _s = 1; _s <= 4; i = ++_s) {
        new Rect(this.world, 4, 4, bX, h / 2 + 360, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      bX = 790;
      for (i = _t = 1; _t <= 2; i = ++_t) {
        new Rect(this.world, 4, 4, bX, h / 2 + 350, b2Body.b2_dynamicBody);
        bX += bSpacing;
      }
      this.wreckingBall = new Circle(this.world, 22, 12, 200, h / 2 + 440, b2Body.b2_dynamicBody);
      return document.addEventListener("mousedown", function(e) {
        _this.firstBrick.push();
        return _this.wreckingBall.push();
      });
    };

    World.prototype.enableDebugDraw = function() {
      var debugDraw;
      debugDraw = new b2DebugDraw;
      debugDraw.SetSprite(this.ctx);
      debugDraw.SetDrawScale(20.0);
      debugDraw.SetFillAlpha(0.5);
      debugDraw.SetLineThickness(1.0);
      debugDraw.SetFlags(b2DebugDraw.e_shapeBit | b2DebugDraw.e_jointBit);
      return this.world.SetDebugDraw(debugDraw);
    };

    World.prototype.update = function() {
      this.world.Step(1 / 30, 10, 10);
      this.world.DrawDebugData();
      return this.world.ClearForces();
    };

    World.prototype.mainLoop = function() {
      this.update();
      return requestAnimFrame(this.mainLoop);
    };

    return World;

  })();

  Playground = (function() {

    function Playground() {
      this.ctx = this.createCanvas();
      new World(this.ctx, this.canvas.width, this.canvas.height);
    }

    Playground.prototype.createCanvas = function() {
      var container;
      this.canvas = document.createElement("canvas");
      this.canvas.width = 960;
      this.canvas.height = 640;
      container = document.getElementById("container");
      container.appendChild(this.canvas);
      return this.canvas.getContext("2d");
    };

    return Playground;

  })();

  InputHandler = (function() {

    InputHandler.prototype.keysDown = {};

    function InputHandler(world) {
      var _this = this;
      this.world = world;
      window.addEventListener("keydown", function(event) {
        return _this.keysDown[event.keyCode] = true;
      });
      window.addEventListener("keyup", function(event) {
        return delete _this.keysDown[event.keyCode];
      });
    }

    InputHandler.prototype.update = function() {};

    return InputHandler;

  })();

  window.Utilities = new Utilities;

  window.onload = new Playground;

}).call(this);
